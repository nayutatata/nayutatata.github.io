<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ViP3D: End-to-end Visual Trajectory Prediction via 3D Agent Queries</title>
    <url>/2023/11/16/ViP3D-End-to-end-Visual-Trajectory-Prediction-via-3D-Agent-Queries/</url>
    <content><![CDATA[<h1 id="ViP3D-End-to-end-Visual-Trajectory-Prediction-via-3D-Agent-Queries"><a href="#ViP3D-End-to-end-Visual-Trajectory-Prediction-via-3D-Agent-Queries" class="headerlink" title="ViP3D: End-to-end Visual Trajectory Prediction via 3D Agent Queries"></a>ViP3D: End-to-end Visual Trajectory Prediction via 3D Agent Queries</h1><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><ol>
<li>传统的perception与prediction是分开建模的，导致：<ol>
<li>两个模块只能通过接口通信，通信的信息十分有限，一般是geometric和semantic特征，比如historical agent trajectories, agent types and agent sizes. 因此许多明显的、预示着主题接下来的行动的信息没有被显式地建模，比如刹车灯亮、车头的偏移等。</li>
<li>prediction模块作为perception模块的downstream，要承担perception模块产生的错误带来的影响，并且这种错误难以消解、会逐渐积累。</li>
</ol>
</li>
<li>LiDAR-based trajectory prediction存在两大问题：<ol>
<li>无法完全利用camera提供的细粒度信息</li>
<li>模型使用feature map作为帧的中间表示，因此会在non-differentiable operations上受到阻碍，例如object decoding中的non-maximum suppression.</li>
</ol>
</li>
</ol>
<p><img src="https://ooo.0x0.ooo/2023/11/16/OefyDN.png" alt="OefyDN.png"></p>
<p>如图所示，传统的方法直接忽略了转向灯的影响。而ViP3D模型的prediction模块可以通过query捕捉到转向灯的改变传递的信息。</p>
<h2 id="ViP3D模型"><a href="#ViP3D模型" class="headerlink" title="ViP3D模型"></a>ViP3D模型</h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img src="https://ooo.0x0.ooo/2023/11/16/OefvnS.png" alt="OefvnS.png"></p>
<p>对于每个个时间点，流程如下：</p>
<ol>
<li>获取输入，输入为多张不同角度的图片。</li>
<li>通过DETR3D模型来从multi-view images 获得2D image features.</li>
<li>通过Temporal Feature Aggregation对agent queries进行管理</li>
<li>通过Query-based Prediction输出预测结果</li>
</ol>
<h3 id="Temporal-Feature-Aggregation"><a href="#Temporal-Feature-Aggregation" class="headerlink" title="Temporal Feature Aggregation"></a>Temporal Feature Aggregation</h3><p>其实就是如何在时间线上管理queries</p>
<p>对于每个query，它要么就和一个agent相关联，要么就为空。</p>
<h4 id="Query-Feature-Update"><a href="#Query-Feature-Update" class="headerlink" title="Query Feature Update"></a>Query Feature Update</h4><p>可以利用cross-attention来进行更新：</p>
<p>$Q$是原来的queries集合，$K_L$和$V_L$分别是features序列的key和value.</p>
<p>那么更新后的$Q_{new}=FFN(softmax(\frac{QK_L^T}{\sqrt d_k})V_L+Q)$</p>
<h4 id="Query-Feature-Supervision"><a href="#Query-Feature-Supervision" class="headerlink" title="Query Feature Supervision"></a>Query Feature Supervision</h4><p>描述了每个agent query在时间线上的变动，即如何利用t-1时刻的query来更新t时刻的query.</p>
<p>就如同我们之前所说，query有两类：</p>
<ol>
<li>已经跟一个agent相关联。</li>
<li>空。</li>
</ol>
<p>那么更新的策略就有两种：</p>
<ol>
<li><p>若当前的query在t-1时刻已经matched：</p>
<ol>
<li>若agent还在，那么$q_t=q_{t-1}$</li>
<li>否则$q_t =EMPTY$</li>
</ol>
</li>
<li><p>若当前query在t-1时刻没有matched：</p>
<p>直接将所有新出现的agent和该query进行匹配。</p>
</li>
</ol>
<h2 id="Query-based-Prediction"><a href="#Query-based-Prediction" class="headerlink" title="Query-based Prediction"></a>Query-based Prediction</h2><p>Outline：</p>
<ol>
<li>输入为agent queries.</li>
<li>包含Map encoder来抓取map features</li>
<li>包含trajectory decoder来输出预测的轨迹</li>
</ol>
<h3 id="Map-Encoding"><a href="#Map-Encoding" class="headerlink" title="Map Encoding"></a>Map Encoding</h3><p>利用VectorNet进行encode，得到结果Map features，记为$M$</p>
<p>则之后agent query和map进行交互时则依赖于$Attention(Q,M)$</p>
<h3 id="Trajectory-Decoding"><a href="#Trajectory-Decoding" class="headerlink" title="Trajectory Decoding"></a>Trajectory Decoding</h3><p>Outline:</p>
<ol>
<li>输入为agent queries.</li>
<li>输出为对于每个agent的K条可能的轨迹。</li>
</ol>
<p>该模型兼容了多种trajectory decoding方法，如regression-based method, goal-based method, heatmap-based method.</p>
<p>本文并没有详述具体的方法。</p>
<h3 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a>Loss</h3><p>loss为前面agent query supervision的loss和轨迹预测的loss之和</p>
<p>$L=L_{cls}+L_{coord}+L_{traj}$</p>
<p><img src="https://ooo.0x0.ooo/2023/11/16/OefrAs.png" alt="OefrAs.png"></p>
<p>对于$L_{traj}$，作者说在Appendix里，但我没找到附录。</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p><img src="https://ooo.0x0.ooo/2023/11/16/OefpkL.png" alt="OefpkL.png"><br><img src="https://ooo.0x0.ooo/2023/11/16/Oefg6C.png" alt="Oefg6C.png"><br><img src="https://ooo.0x0.ooo/2023/11/16/OefKwa.png" alt="OefKwa.png"><br><img src="https://ooo.0x0.ooo/2023/11/16/OefASK.png" alt="OefASK.png"></p>
<h2 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h2><p><img src="https://ooo.0x0.ooo/2023/11/16/OefJpi.png" alt="OefJpi.png"></p>
]]></content>
      <categories>
        <category>论文概览</category>
      </categories>
      <tags>
        <tag>ADS</tag>
        <tag>论文概览</tag>
      </tags>
  </entry>
  <entry>
    <title>windows操作系统下基于github和hexo搭建个人博客</title>
    <url>/2023/11/09/windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%9F%BA%E4%BA%8Egithub%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="依赖下载"><a href="#依赖下载" class="headerlink" title="依赖下载"></a>依赖下载</h1><h2 id="git下载"><a href="#git下载" class="headerlink" title="git下载"></a>git下载</h2><p>从阿里镜像下载即可<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">CNPM Binaries Mirror (npmmirror.com)</a></p>
<p>下载后需要通过以下命令设置用户名和邮箱：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your_name&quot;</span><br><span class="line">git config --global user.email &quot;your_email&quot;</span><br></pre></td></tr></table></figure>
<p>为了防止执行<code>git push</code>和<code>git clone</code>等命令时出现网络速度较慢的问题，建议设置代理。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy &#x27;xxx.xxx.xxx.xxx : xxxx&#x27;</span><br><span class="line">git config --global https.proxy &#x27;xxx.xxx.xxx.xxx : xxxx&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>从官网直接下载最新版本即可<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/en/">https://link.zhihu.com/?target=https%3A//nodejs.org/en/</a></p>
<p>安装时记得勾选<code>Add to Path</code>将其加入环境变量中。</p>
<p><strong>检查是否安装成功</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>正常情况下会显示Node.js的版本号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>正常情况下会显示npm的版本号</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h3><p><strong>若无特殊说明，以下命令均在git bash中输入</strong></p>
<p>输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli <span class="comment"># 安装hexo</span></span><br></pre></td></tr></table></figure>
<p>安装之后，找一个空文件夹，比如<code>D:\Blog</code>，然后cd到该目录下，输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>还需要安装一个插件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>这个插件用于将<code>Blogs\public</code>文件夹的内容上传至github</p>
<h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="在github上新建仓库"><a href="#在github上新建仓库" class="headerlink" title="在github上新建仓库"></a>在github上新建仓库</h2><p>新建一个名为<code>your_name.github.io</code>的仓库，这个仓库用于存放博客所需的静态文件。</p>
<h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><p>在git bash中输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t -rsa -C <span class="string">&quot;your_email&quot;</span> <span class="comment"># 指的是github的注册邮箱</span></span><br></pre></td></tr></table></figure>
<p>然后直接三个回车（无需设置密码）</p>
<p>打开<code>C:\Users\username\.ssh\id_rsa.pub</code>文件，复制内容。</p>
<p>打开<a href="https://github.com/settings/ssh/new，创建一个ssh">https://github.com/settings/ssh/new，创建一个ssh</a> key，将<code>id_rsa.pub</code>的内容粘贴到Key的框框下即可。</p>
<p><strong>检查是否创建成功：</strong></p>
<p>在git bash中输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>连接成功后会出现以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi your_name! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
<h2 id="Hexo部分用法"><a href="#Hexo部分用法" class="headerlink" title="Hexo部分用法"></a>Hexo部分用法</h2><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>这个命令将会在<code>public</code>文件夹中生成相关的静态<code>html</code>文件。</p>
<h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>这个会提供实时的预览服务，也就意味着在更新某个配置文件后，你不需要重新输入该命令即可在<code>http://localhost:4000</code>查看网页内容。</p>
<p><strong>可能会出现以下warning：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF in</span><br></pre></td></tr></table></figure>
<p>可以输入以下内容解决：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global core.safecrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="部署至github"><a href="#部署至github" class="headerlink" title="部署至github"></a>部署至github</h3><p>在此之前，需要把根目录下的配置文件<code>_config.yml</code>中的<code>deploy</code>部分修改成：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxxxxx/xxxxxxx.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>其中<code>repo</code>可以在仓库的<code>code</code>中获取</p>
<p>在git bash中输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>即可完成部署</p>
<p><strong>检查是否部署成功：</strong></p>
<p>打开<code>https://your_name.github.io</code>，如果内容和本地浏览内容一致，则部署成功。</p>
<p>如果不一致，可以考虑在本地输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>再进行检查。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>博客</tag>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】2023-11-4</title>
    <url>/2023/11/09/%E3%80%90%E6%97%A5%E5%B8%B8%E3%80%912023-11-4/</url>
    <content><![CDATA[<p><strong>以流水账的形式记录一些故事</strong></p>
<p>​    很早以前，和H约好去迪士尼，时间定在了11月5号。</p>
<p>​    11月4号，我到了车站，在很远的地方就看到了H——那个像小孩子一样一只手扶着行李箱，一只手叉着腰的女孩。她时不时晃晃头，尝试着捕捉她一直等待着的那个人。可惜，她的目光并没我想象中的锐利，她并没能发现我，因此我也就无从施展我从别人身上学来的小技巧——看到对方之后假装扫视一下对方周围的环境，最后目光聚焦在她身上对着她笑笑。要是能用上就好了，没准她会很开心。</p>
<p>​    后来我们一同去逛了世界商场，买了些东西。回到酒店时已经不早了。H的妈妈给她打了一个不短的电话，而我则在床上睡着了。醒来时，她向我说她们对话的内容，详情我已经忘却大半，只记得听完她说的话之后我心里空落落的。</p>
<p>​    后来，我们褪去衣物躺在床上，发生了一段令人难过的对话。</p>
<p>​    H对我说，其实在恋爱中女生和男生很不一样：女生往往只需要得到男生本人的认可，而男生要面对的却不止女生一个人，还有她的家人、闺蜜、许许多多的朋友。她又开口，说如果她闺蜜的男友做出了什么让她闺蜜伤心的事情，不管这件事是对还是错，她都会帮着她闺蜜骂男友的。</p>
<p>​    其实这只是立场的作用罢了，人总会本能地支持自己亲近的人。我不置可否，毕竟是我我也会这么做。只不过额外的，我可能更倾向于事物本身的对错——当然在此之前需要安抚“受害者”的情绪罢了。不过在那时那刻我切身听到那些话时，我总觉得被子外面的冷气格外肆虐，仿佛又回到了多年前的那个冬天。</p>
<p>​    “我不会拒绝的父母的要求的。平时他们对我的决定都不怎么过问，事事都听我的。但等到他们真正下了通牒，我就清楚这些是命令——他们叫我不要怎么样，我不会想着拒绝。所以说这对你来说很不公平，因为你能决定你自己的事情，但我不能。”</p>
<p>​    对啊，的确很不公平，那又如何呢。我睁开眼，看着周围暗下去的一切。民宿的窗帘遮光效果并不好，以至于我还能看到轻松跃过窗帘的朦胧的月光。或许是这微弱光芒引发了我的幻觉，我觉得身前立着几个高大的影子，七嘴八舌地讨论我的质量，以决定我的价格。</p>
<p>​    “或许男生确实容易沦为被选择被比较的那一方吧，”我鬼使神差地说，可能是因为刚刚的幻觉吧，我有一种被摆在天平上比较的感觉，“我们因为缘分和喜欢与自己的恋人在一起，然后却要经过恋人身边的无数人的考验。最后在一层一层的比较中，感情的决定权早就不在相恋的人彼此手上了。”</p>
<p>​    “他们叫我不要怎么样，我没办法拒绝”在我脑海中横冲直撞，让我感到有些晕眩，让我感到有些委屈。我压住自己的情绪，缓缓开口：“如果有一天，因为你身边的人，我们分开了……”我顿了顿，尝试着把眼泪困在眼眶里，随后说：“我也可以接受。”说来也是，我除了接受真的有其他选择吗？</p>
<p>​    我转过头去，好让自己的情绪更稳定些。只是出乎我意料的，她哭得很厉害——她身体不停颤抖，下巴不受控制地下移，好让她撕心裂肺的哭声顺利从嘴巴里传出来。我竭力按住她在空中摆动的双手，因为我只知道如果我不这么做，这双手只会打在她自己的脸上。我贴着她的有些冰凉的身体，试图让她暖一点，然后用尽可能温柔的声音在她耳边重复“我在呢宝贝”。</p>
<p>​    其实人可能就是这样，面对所爱之人的哭泣，自己再怎么难受都会忘掉自己的情绪，转而去安慰对方。因为自己的委屈就像是树底的阴影，而爱人的难过可能就是被愁云笼罩的大地。</p>
<p>​    过了几分钟，怀里的H停止了哭泣，我问了问原因，她啜泣道：“过了这么久了，我终于相信你会一直陪着我，终于有了一点安全感。现在你却跟我说，‘如果因为其他因素分开我也可以接受’，呜呜，我就完全不能接受。”我感到有些自责，因为我并没能正确表达出我的意思。我或许会因此崩溃，但在她面前，我说不出来这种话，于是“可以接受”便成为了最好的托词——至少它看上去没有“崩溃”那么软弱。“因为你说你没办法拒绝他们的要求，如果有一天，在比较当中，我就是落选的那个。你没有办法拒绝。我只能接受。”我立马解释道。</p>
<p>​    随后她嘟囔了一句简短的话，遗憾的是我并没有听清楚她的回答。</p>
<p>​    后来她不再哭了，因为我开始哭了。我不知道自己为什么会哭，可能是自己眼前的那些影子在不断地议论我的价格，指摘我的质量问题，同时批评我的生产厂家，或许我因此感到很委屈。我已经经历过无数次的筛选和比较，此刻站在自己的恋人面前，我却要目睹她把选择的权利交于他人之手。</p>
<p>​    “其实啊，她们所谓的比较，只会比较现在的人和之前的人。比如‘你现在这个男友可比以前那个好多啦’。或者她们只会比较不同的人的老公，比较房车工资之类的，谁会在意谁读了多少书呢。大家其实都是很世俗的人。“</p>
<p>​    那一刻，我被一双大手从天平上拿了下来，我不再是谁的竞争对手，也许也不会再以货物的形式和别人比来比去了。</p>
<p>​    “这样的话可能我唯一的优点都不会被比较啦。”我打趣道。</p>
<p>​    “你的优点会在我身上体现出来的。跟你在一起之后，我的室友一直在嚷嚷着‘呀！上次H坐在书桌前两个小时一动不动都是什么时候啦？’”</p>
<p>​    我很喜欢她躺在床上正对着我说话，我感到自己被在乎着。窗外的月华渐渐黯淡下来，透过窗帘的光芒也所剩无几了。我拥着她，我们的胸膛毫无阻隔地紧紧贴着，感受着彼此的心跳。</p>
<p>​    “她身上好暖，”我想，“我们会这样解决一个又一个问题的。”</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>情感</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】2023-11-11</title>
    <url>/2023/11/11/%E3%80%90%E6%97%A5%E5%B8%B8%E3%80%912023-11-11/</url>
    <content><![CDATA[<h2 id="关于地产"><a href="#关于地产" class="headerlink" title="关于地产"></a>关于地产</h2><h3 id="城投债"><a href="#城投债" class="headerlink" title="城投债"></a>城投债</h3><p>城市投资债务，是由政府通过政府直属的第三方机构向民众发行的债务。政府收集到的资金用于城市建设。</p>
<p>原因：国家无法直接大量地向政府拨款。</p>
<h3 id="地产"><a href="#地产" class="headerlink" title="地产"></a>地产</h3><p>事实：</p>
<ol>
<li>一手房通常用于投资。</li>
<li>政府用于还清债务的资金的主要来源是一手房所产生的税收。</li>
<li>一手房的投资资金大多来源于二手房出售获取的利润。</li>
<li>二手房大多数在平民手中。</li>
</ol>
<p>$1+2\Rightarrow a.政府需要保障一手房的成交量。$</p>
<p>$4\Rightarrow b.政府无法通过降价来刺激二手房成交量。$</p>
<p>$2+a\Rightarrow 一手房的成交量无法通过降价来保证。$</p>
<h2 id="初窥物流系统"><a href="#初窥物流系统" class="headerlink" title="初窥物流系统"></a>初窥物流系统</h2><p><strong>仅对仓储部分进行介绍</strong></p>
<h3 id="仓储视角的“发货”"><a href="#仓储视角的“发货”" class="headerlink" title="仓储视角的“发货”"></a>仓储视角的“发货”</h3><ol>
<li>商家收到订单，向仓库发送指令，形如<code>(userinfo,goods,...)</code></li>
<li>仓库根据该指令进行拣货，并进行封装，打包成快递公司能寄出的样子。</li>
<li>信息生成：仓库从快递公司购买快递单号，然后将用户信息与快递单号交付给快递公司，生成条形码</li>
<li>快递公司按批收揽。</li>
<li>快递公司发货。</li>
</ol>
<h2 id="“男友力”照片"><a href="#“男友力”照片" class="headerlink" title="“男友力”照片"></a>“男友力”照片</h2><p>在酒店里，H提出要拍一些有意思的照片，其中有一张让我印象深刻：男生直立，女生右膝横放在男生的右肩上，上肢则搭在男生的左肩上。整体来看就是男生把女生扛在双肩上，男生不动如山，女生优雅从容。</p>
<p>然而我们拍的时候并不顺利——H的左腿在空中摆动、无处安放，上肢紧紧抱着我的脖子和左肩，小脑袋根本抬不起来。过了几秒，大概她挣扎累了，抬头看了看镜子，我们的目光才在镜中交汇。如果当时有一台相机，定格住的画面中最显眼的大概就是她大喊大叫时的搞笑而又狰狞的面容和我放肆的笑脸。</p>
<p>“起初是担心你举不动我，原来更值得担心的是我能不能在你身上撑住。”H说。</p>
<p>后来，我们又试了一个姿势：她跪坐在小腿上，我将她的小腿托举起来，知道我们的眼睛在一条水平线上。毫无疑问，最终的成果并没有原po主从容不迫的感觉——她直接贴在了我的身上，像个小朋友一样哇哇乱叫。</p>
<p>没拍成，但是H真的很可爱。</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>情感</tag>
      </tags>
  </entry>
  <entry>
    <title>【过程记录】EXCEL十字定位线</title>
    <url>/2023/11/10/%E3%80%90%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95%E3%80%91EXCEL%E5%8D%81%E5%AD%97%E5%AE%9A%E4%BD%8D%E7%BA%BF/</url>
    <content><![CDATA[<h1 id="网络插件"><a href="#网络插件" class="headerlink" title="网络插件"></a>网络插件</h1><p>易用宝：<a href="http://yyb.excelhome.net/download/">最新版下载 | Excel易用宝 (excelhome.net)</a></p>
<p>易用宝功能部分需要微信扫码，由于只需要十字定位功能，所以考虑自行实现。</p>
<h1 id="自行实现"><a href="#自行实现" class="headerlink" title="自行实现"></a>自行实现</h1><h2 id="条件格式"><a href="#条件格式" class="headerlink" title="条件格式"></a>条件格式</h2><p><code>=(CELL(&quot;row&quot;)==ROW()+(CELL(&quot;col&quot;)==COLUMN()))</code></p>
<p><code>=(CELL(&quot;row&quot;)==ROW()*(CELL(&quot;col&quot;)==COLUMN()))</code></p>
<h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Private Sub Worksheet_SelectionChange(ByVal Target As Range)</span><br><span class="line">    Calculate</span><br><span class="line">End Sub</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="TBD"><a href="#TBD" class="headerlink" title="TBD"></a>TBD</h2><p>条件格式的透明度</p>
<p>条件格式如何形成全局文件</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>【CSP】202303-2 垦田计划</title>
    <url>/2023/11/18/%E3%80%90CSP%E3%80%91202303-2-%E5%9E%A6%E7%94%B0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>见 <a href="https://blog.csdn.net/tigerisland45/article/details/133441847">https://blog.csdn.net/tigerisland45/article/details/133441847</a></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="暴力遍历"><a href="#暴力遍历" class="headerlink" title="暴力遍历"></a>暴力遍历</h2><p>遍历数组，每次都选最大的进行削减即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="type">int</span> *t = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    <span class="type">int</span> *c = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; t[i] &gt;&gt; c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="type">int</span> maxi = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (t[j]&gt;t[maxi])&#123;</span><br><span class="line">                maxi = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m&gt;=c[maxi] &amp;&amp; t[maxi]&gt;k)&#123;</span><br><span class="line">            t[maxi]--;</span><br><span class="line">            m -= c[maxi];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; t[maxi];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>事实上，每一次“找最大的”可以用优先队列来实现。</p>
<h3 id="优先队列介绍"><a href="#优先队列介绍" class="headerlink" title="优先队列介绍"></a>优先队列介绍</h3><p><code>priority_queue&lt;Type,Container,Functional&gt;</code></p>
<p><code>Type</code>表示队列里的数据类型，<code>Container</code>表示装队列的容器类型（默认为<code>vector&lt;Type&gt;</code>），<code>Functional</code>是比较类，默认为<code>less&lt;int&gt;</code>，即最大堆。</p>
<p>例如<code>priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt;</code>或<code>greater&lt;int&gt;</code></p>
<p>如何实现元素的比较，从而指定最大堆还是最小堆呢？</p>
<ol>
<li><p>操作符重载：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> a):<span class="built_in">x</span>(a);</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> A &amp;other) <span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&lt;other.x; <span class="comment">// 你说小于，我这边也是小于，方向相同就是最大堆</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>这里一定注意不要忘记操作符重载的两个const</strong></p>
</li>
<li><p>重写仿函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">F</span>&#123;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(A a1,A a2)&#123;</span><br><span class="line">        <span class="keyword">return</span> a1.x&lt;a2.x; <span class="comment">// 你说小于，我这边也是小于，方向相同就是最大堆</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Pair</span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="built_in">Pair</span>(<span class="type">int</span> a,<span class="type">int</span> b):<span class="built_in">t</span>(a),<span class="built_in">c</span>(b)&#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Pair&amp; other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t &lt; other.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    priority_queue&lt;Pair&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> t, c;</span><br><span class="line">        cin &gt;&gt; t &gt;&gt; c;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">Pair</span>(t, c));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        Pair a = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (m&gt;=a.c &amp;&amp; a.t&gt;k)&#123;</span><br><span class="line">            m -= a.c;</span><br><span class="line">            a.t--;</span><br><span class="line">            q.<span class="built_in">push</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; a.t &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>优先队列</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】2023-11-18</title>
    <url>/2023/11/18/%E3%80%90%E6%97%A5%E5%B8%B8%E3%80%912023-11-18/</url>
    <content><![CDATA[<h1 id="人类养成日记"><a href="#人类养成日记" class="headerlink" title="人类养成日记"></a>人类养成日记</h1><p>今天意识到了主动分享的重要性。</p>
<p>从前我是一个乐于分享的人，但我的分享常常会绕过别人的手掌，摔在地上，变成一地的碎屑。自那以后，因为害怕对方的厌恶，我的分享欲渐渐退却了，也因此记不住很多事情——大概是因为只有我一个人记着，我忘记了的话，这件事就真的从世界上消失了，没有失而复得的机会。后来，当我恋爱时，我也常常告诉自己，不要让恋人的分享落空。我把这个作为表达爱的方式，通过认真体会、认真答复让恋人感觉到温暖。</p>
<p>遗憾的是，我还是个初学者，我总是让H失望。我的低分享欲切断了她了解我的来源，因此她没办法参与到我的生活当中。我终于意识到这对她不公平，这的确是我的错。</p>
<p>不过，至少她说乐意听我说活、也愿意倾听我分享的事物。</p>
<p>还好，还有机会。希望能变成更好的人，不要总让她失望。</p>
<h1 id="Record-1"><a href="#Record-1" class="headerlink" title="Record-1"></a>Record-1</h1><p>H：如果我去给手机贴膜，我大概会鬼哭狼嚎半天，也许你不会。但你至少要告诉我——告诉我这件事，告诉我你在干什么。</p>
<p>H：我总在跟你分享，所以你一直说“感觉我在参与你的生活”。那？一个分享欲本来就没那么强烈的你，我该怎么参与你的生活呢？哥哥 人家都说学同一个专业，在同一个学校，会有共同话题。我们其实已经很好了，我们非常乐意接受/听自己不了解领域的知识。</p>
<p>H：但是你知道吗？ 我对你的了解太少了。</p>
<p>H：泛商科 一个门槛很低的学科种类<br>       计算机 一个门槛很高的学科种类</p>
<p>H：我跟你分享的很多东西，你都可以从一些生活化又有点专业化的角度告诉我你的看法，比如：成本？客群？市场规模？但我不行的，计算机这门学科 本身就不具备这种特性。很多时候我会想，很多年以后你在自己耕耘的领域越来越专精，能讲的科普都讲得差不多的时候，我该跟你聊什么呢？</p>
<p>H：你总是说，其实你没有我想象中那么忙，你也不是每时每刻都在学习。但我看到的你，不就是学习当中的你吗？可能我有点贪心，可能我太依赖女生视角，希望用女生的方式来获取你的生活。但是 没有任何一个女朋友能说服自己说：吃什么？还不就是那点东西。在干什么？还不就是那几件事。我确实很自私，试图改变你的社交方式——但是只要你说，我很愿意听的。</p>
<p>L：我以前大概也是个分享欲强的人。</p>
<p>H：以前的事情，已经过去了。如果你愿意说，我肯定很乐意听，毕竟人就是一个好奇宝宝。但我不逼你的，哥哥，我不会逼你的。</p>
<h1 id="Record-2"><a href="#Record-2" class="headerlink" title="Record-2"></a>Record-2</h1><p>H：那哥哥是不是能稍微理解一点点为什么我总觉得特别打扰你？</p>
<p>H：因为在我的眼里你全都在学习，我都不敢问。</p>
<p>H：你想想 我只要说我在学习 我在工作 你是不是就会立刻挂断电话 或者 结束聊天？</p>
<p>H：那我第一次问 你在学习 第二次问 你还在学习</p>
<p>H：我还会问第三次吗？ 只要你有所停顿 有所犹豫 或者 不回应</p>
<p>H：我是不是就理所当然地理解为 你在学习</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>可以通过分享来表达爱，让H觉得自己没有在打扰我。</p>
<p>谢谢H教我怎样经营一段感情。</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>情感</tag>
      </tags>
  </entry>
  <entry>
    <title>【CSP】202212-2 训练计划</title>
    <url>/2023/11/18/%E3%80%90CSP%E3%80%91202212-2-%E8%AE%AD%E7%BB%83%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>见 <a href="https://blog.csdn.net/tigerisland45/article/details/133717558">https://blog.csdn.net/tigerisland45/article/details/133717558</a></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>关键路径问题：</p>
<ol>
<li>给定图$G=(V,E)$.每个结点都代表一个任务，其中有一个属性表示完成该任务所需的时间；$\forall v_1,v_2\in V,(v1,v2)\in E$表示$v_1$依赖于$v_2$</li>
<li>没有依赖关系的任务可以并行</li>
</ol>
<p>问：完成整个任务最少需要多少时间，哪一条路径是关键路径</p>
<p>定义：</p>
<ol>
<li><p>最早开始时间$est$表示某个任务可能的最早的开始时间：</p>
<p>$est(v)=min(\{est(u)+time(u)|u\in neighor(v)\})$</p>
</li>
<li><p>最早结束时间$eft=est+time$</p>
</li>
</ol>
<p>对于该题，这是一个简化过的关键路径问题，因此：</p>
<p>对于最早开始时间：</p>
<ol>
<li><p>若结点$v$没有任何依赖，$est(v)=0$</p>
</li>
<li><p>否则结点$v$依赖于$u$，则$est(v)=est(u)+time(u)$</p>
</li>
</ol>
<p>对于最晚开始时间：</p>
<ol>
<li>若没有任何结点依赖$v$，则$lst(v)=DDL-time(v)+1$</li>
<li>若结点$v$依赖于$u$，则$lst(u)=lst(v)-time(u)+1$</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">time</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rely</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">relied</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">earl</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">late</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    late[<span class="number">0</span>] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m;i++)&#123;</span><br><span class="line">        cin &gt;&gt; rely[i];</span><br><span class="line">        relied[rely[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m;i++)&#123;</span><br><span class="line">        cin &gt;&gt; time[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (rely[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            earl[i] = earl[rely[i]] + time[rely[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            earl[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m;i++)&#123;</span><br><span class="line">        cout &lt;&lt; earl[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span> (earl[i]+time[i]&gt;n+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        late[i] = late[relied[i]] - time[i] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m;i++)&#123;</span><br><span class="line">        cout &lt;&lt; late[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>简化关键路径</tag>
      </tags>
  </entry>
  <entry>
    <title>【CSP】202309-3 梯度求解</title>
    <url>/2023/11/19/%E3%80%90CSP%E3%80%91202309-3-%E6%A2%AF%E5%BA%A6%E6%B1%82%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>见 <a href="http://118.190.20.162/view.page?gpid=T173">http://118.190.20.162/view.page?gpid=T173</a></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h2><p>输入的表达式是一个以空格分割的字符串，那么如何读取这个字符串，如何将字符串分割呢？</p>
<h3 id="输入字符串"><a href="#输入字符串" class="headerlink" title="输入字符串"></a>输入字符串</h3><p>首先，<code>std::getline(cin,str)</code>可以读取一整行字符串。但需要注意的是，该函数并不能像<code>cin&gt;&gt;</code>一样直接清空缓冲区。所以如果缓冲区里有回车，一定要记得<strong>在<code>getline</code>前面加一个<code>getchar</code></strong></p>
<h3 id="取出被空格分割的字符串"><a href="#取出被空格分割的字符串" class="headerlink" title="取出被空格分割的字符串"></a>取出被空格分割的字符串</h3><p>头文件<code>&lt;sstream&gt;</code>中有<code>stringstream</code>类，可以用于完成这个任务。</p>
<ol>
<li>初始化<code>stringstream ss(str)</code>，可以直接用字符串进行初始化。</li>
<li><code>ss.str()</code>表示的是<code>ss</code>里面存的字符串。</li>
<li><code>ss&gt;&gt;str</code>将会像<code>cin&gt;&gt;str</code>一样，去除<code>ss</code>当前位置可能的前导空格，读取一个数据直到遇到下一个空格为止，并且该空格不会被删除。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stringstream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">stringstream <span class="title">ss</span><span class="params">(<span class="string">&quot;abc def ghi jkl mno&quot;</span>)</span></span>;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span>(ss&gt;&gt;s)&#123; <span class="comment">// 每次循环都会更新s,而不是在原来的基础上拼接。返回值为ss的地址，但是似乎ss&gt;&gt;s到bool的强制类型转换被设计过，ss被读取完毕后就会返回false。在读取过程中ss存储的字符串本身不会改变，改变的是读写指针。</span></span><br><span class="line">        cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="求偏导过程"><a href="#求偏导过程" class="headerlink" title="求偏导过程"></a>求偏导过程</h2><p>和正常的逆波兰表达式求值没有太大区别。只不过栈里面的数据结构不只是数字，而是计算的结果和对应的偏导结果。</p>
<p>约定只有求导的对象才是变量，其他都是常数：</p>
<ol>
<li>如果是变量，值设为对应的值，导数设为1，入栈。</li>
<li>如果是常量，值设为常量值，导数设为0，入栈。</li>
<li>如果是符号，取出两个操作数，计算结果，并按照求导法则求出导数，入栈。</li>
</ol>
<p><strong>注意，先出栈的是右边的操作数，即operand2</strong></p>
<p><strong>Q：为什么可以直接在栈里面存求导的结果呢？正常来说不应该是将导函数求出来之后再代入具体数值吗？</strong></p>
<p>A：假设从栈里取出来的是式子，分别为$f(x)$和$g(x)$且此时的操作符是乘号。那么我们应当把$f(x)g(x)$和$f(x)g’(x)+f’(x)g(x)$入栈。但事实上，如果我们要求的是导数在$x=1$处的值，存结果也是一样的。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>注意结果取模的问题，为了防止结果为负数，采用该取模方式：</p>
<p><code>ans = ((ans)%MOD+MOD)%MOD;</code></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://118.190.20.162/view.page?gpid=T173</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">elem</span> &#123;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    ll value;</span><br><span class="line">    ll dao;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">ll <span class="title">Stoi</span><span class="params">(string a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        sign = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            ans = <span class="number">10</span> * ans + (a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans * sign;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    string op;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="built_in">getline</span>(cin, op);</span><br><span class="line">    vector&lt;elem&gt; expr;</span><br><span class="line">    stack&lt;elem&gt; st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> tar;</span><br><span class="line">        <span class="function">vector&lt;ll&gt; <span class="title">value</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        cin &gt;&gt; tar;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            cin &gt;&gt; value[j];</span><br><span class="line">        <span class="function">stringstream <span class="title">ss</span><span class="params">(op)</span></span>;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="keyword">while</span> (ss&gt;&gt;s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                elem a;</span><br><span class="line">                a.index = <span class="built_in">Stoi</span>(s.<span class="built_in">substr</span>(<span class="number">1</span>, s.<span class="built_in">length</span>() - <span class="number">1</span>));</span><br><span class="line">                a.dao = tar == a.index ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                a.value = value[a.index];</span><br><span class="line">                st.<span class="built_in">push</span>(a);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">length</span>()==<span class="number">1</span> &amp;&amp; (s[<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span> || s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span> || s[<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                elem op2 = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                elem op1 = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                elem res;</span><br><span class="line">                <span class="keyword">switch</span> (s[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: &#123;</span><br><span class="line">                    res.value = ((op1.value + op2.value)%MOD+MOD)%MOD;</span><br><span class="line">                    res.dao = ((op1.dao + op2.dao)%MOD+MOD)%MOD;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: &#123;</span><br><span class="line">                    res.value = ((op1.value - op2.value)%MOD+MOD)%MOD;</span><br><span class="line">                    res.dao = ((op1.dao - op2.dao)%MOD+MOD)%MOD;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: &#123;</span><br><span class="line">                    res.value = ((op1.value * op2.value)%MOD+MOD)%MOD;</span><br><span class="line">                    res.dao = ((op1.dao * op2.value + op1.value * op2.dao)%MOD+MOD)%MOD;</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">push</span>(res);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                elem a;</span><br><span class="line">                a.value = <span class="built_in">Stoi</span>(s);</span><br><span class="line">                a.dao = <span class="number">0</span>;</span><br><span class="line">                st.<span class="built_in">push</span>(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = st.<span class="built_in">top</span>().dao;</span><br><span class="line">        </span><br><span class="line">        cout &lt;&lt; ((ans%MOD)+MOD)%MOD &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>栈</tag>
        <tag>逆波兰表达式</tag>
        <tag>stringstream</tag>
      </tags>
  </entry>
  <entry>
    <title>【CSP】202309-4 阴阳龙</title>
    <url>/2023/11/20/%E3%80%90CSP%E3%80%91202309-4-%E9%98%B4%E9%98%B3%E9%BE%99/</url>
    <content><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>见 <a href="http://118.190.20.162/view.page?gpid=T172">http://118.190.20.162/view.page?gpid=T172</a></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><strong>该贴只用于记录学习过程，代码是TLE</strong></p>
<p>直接模拟即可，核心的功能有两个：</p>
<ol>
<li><code>decideK</code>：如何根据该时刻的队员坐标集确定k</li>
<li><code>move</code>：如何将队员坐标进行改变</li>
</ol>
<p>过程中可能会遇到以下问题：</p>
<ol>
<li>每次找最近的队员坐标都需要重新遍历坐标集，有没有更快的方法？</li>
<li>“旋转”操作中$(d_{(i+t)mod8})$如何实现？</li>
</ol>
<h2 id="快速遍历坐标"><a href="#快速遍历坐标" class="headerlink" title="快速遍历坐标"></a>快速遍历坐标</h2><p>思路：在输入成员坐标时就记录每一行、每一列、每个对角线的队员的属性。以后改变坐标的时候再改变集合即可。</p>
<p>细节方面，要考虑用何种方式来唯一标记每行每列以及每个对角线：</p>
<ol>
<li>用纵坐标标记行</li>
<li>用横坐标标记列</li>
<li>用横纵坐标之和标记主对角线</li>
<li>用横纵坐标之差标记副对角线</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m, p, q;</span><br><span class="line">vector&lt;array&lt;<span class="type">int</span>, 2&gt;&gt; pos;</span><br><span class="line">map&lt;<span class="type">int</span>, set&lt;array&lt;<span class="type">int</span>, 2&gt;&gt;&gt; col, row, md, vd;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p &gt;&gt; q;</span><br><span class="line">	pos.<span class="built_in">push_back</span>(&#123; <span class="number">0</span>,<span class="number">0</span> &#125;);<span class="comment">// 占位置的</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x, y;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		pos.<span class="built_in">push_back</span>(&#123; x,y &#125;);</span><br><span class="line">		col[x].<span class="built_in">insert</span>(&#123; y,i &#125;);</span><br><span class="line">		row[y].<span class="built_in">insert</span>(&#123; x,i &#125;);</span><br><span class="line">		md[x + y].<span class="built_in">insert</span>(&#123; x,i &#125;);</span><br><span class="line">		vd[x - y].<span class="built_in">insert</span>(&#123; x,i &#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p><code>array&lt;Type,Size&gt;</code>是定长数组，可以直接使用列表初始化：</p>
<p><code>array&lt;int,5&gt;&#123;1,2,3,4,5&#125;;</code></p>
<p><code>array&lt;int,2&gt;</code>可以直接用来表示坐标，值得注意的是，<code>array</code>重载了<code>operator&lt;</code>，按照字典序排序。这个对于之后的查找很有帮助。</p>
<h3 id="如何快速查找“距离最近的元素”"><a href="#如何快速查找“距离最近的元素”" class="headerlink" title="如何快速查找“距离最近的元素”"></a>如何快速查找“距离最近的元素”</h3><h4 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h4><p><code>upper_bound(begin,end,value,cmp)</code></p>
<p>返回<code>[begin,end)</code>区间内第一个使得<code>value&lt;elem</code>或者<code>cmp(value,elem)</code>为<code>true</code>的<code>elem</code>的迭代器。</p>
<p>人话：返回第一个大于给定值的迭代器。<code>cmp</code>实现的实际上就是逻辑上的小于。</p>
<p>顺便介绍一下<code>lower_bound</code>，它返回第一个大于等于给定值的迭代器。</p>
<p><strong>前提是数组有序</strong></p>
<p><strong>由于该函数在支持随机访问的容器上性能较好，若要在不支持随机访问的容器如map、set进行类似操作，请使用它们的成员函数upper_bound</strong></p>
<h4 id="查找最近的元素"><a href="#查找最近的元素" class="headerlink" title="查找最近的元素"></a>查找最近的元素</h4><p>由于<code>array</code>天然实现了<code>operator&lt;</code>，所以在调用<code>upper_bound</code>的时候没有阻碍。</p>
<p>用查找同一行为例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> u,v,t;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; t;</span><br><span class="line"><span class="keyword">auto</span> gre_it = row[v].<span class="built_in">upper_bound</span>(u);</span><br><span class="line"><span class="keyword">auto</span> les_it = row[v].<span class="built_in">lower_bound</span>(u);</span><br><span class="line"><span class="type">int</span> gre = *(gre_it)[<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> les = les_it == row[v].<span class="built_in">begin</span>() ? <span class="number">-1</span> : *(--les_it)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<h2 id="旋转操作的实现"><a href="#旋转操作的实现" class="headerlink" title="旋转操作的实现"></a>旋转操作的实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">pos</span> &#123;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="type">int</span> y;</span><br><span class="line">	<span class="built_in">pos</span>(<span class="type">int</span> a, <span class="type">int</span> b) :<span class="built_in">x</span>(a), <span class="built_in">y</span>(b) &#123;&#125;</span><br><span class="line">	<span class="built_in">pos</span>() &#123; x = <span class="number">0</span>; y = <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> pos&amp; other) <span class="type">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x == other.x &amp;&amp; y == other.y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hasher</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pos&amp; a)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">hash</span>&lt;<span class="type">int</span>&gt;()(a.x) + <span class="built_in">hash</span>&lt;<span class="type">int</span>&gt;()(a.y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;pos&gt; dir = &#123; &#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line">unordered_map&lt;pos, <span class="type">int</span>,Hasher&gt; search = &#123;</span><br><span class="line">	&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,<span class="number">0</span>&#125;,&#123;&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,<span class="number">1</span>&#125;,&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,<span class="number">2</span>&#125;,&#123;&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,<span class="number">3</span>&#125;,&#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,<span class="number">4</span>&#125;,&#123;&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,<span class="number">5</span>&#125;,&#123;&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,<span class="number">6</span>&#125;,&#123;&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,<span class="number">7</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>给你一个<code>(x,y)</code>，你要如何知道该坐标现在在哪个方向，如何根据这个方向拿到它在<code>dir</code>的<code>index</code>呢？前一个很好解决，后面一个问题可以用硬编码的方式存在<code>search</code>里。</p>
<p>但是这里有一个问题：<code>unordered_map</code>不知道<code>pos</code>的哈希值是啥，所以需要我们自己定义。</p>
<h3 id="自定义数据结构在unodered-map中的存储"><a href="#自定义数据结构在unodered-map中的存储" class="headerlink" title="自定义数据结构在unodered_map中的存储"></a>自定义数据结构在unodered_map中的存储</h3><h4 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h4><p><code>unordered_map&lt;KeyType,ValueType,Hasher&gt;</code></p>
<p>可以将一个仿函数<code>F</code>传到<code>Hasher</code>中（之所以能传是因为<code>F</code>名义上是一个类），<code>F</code>需要重载<code>operator()</code>，即函数调用运算符。<strong>不要忘记两个const</strong></p>
<p>至于基础数据类型的哈希值，可以考虑使用<code>utility</code>头文件中的<code>hash&lt;Type&gt;</code>来计算，这也是个仿函数，注意调用的方法。<code>hash&lt;int&gt;()(a.y)</code>中，前一个括号不是函数调用，而是构造函数。</p>
<h4 id="为什么要重载"><a href="#为什么要重载" class="headerlink" title="为什么要重载=="></a>为什么要重载==</h4><p>塞进去的时候，通过Key的Hash找到Key的位置。</p>
<p>拿出来的时候，通过Key的Hash找到位置的时候，你总得比一下Key看看这是不是你的位置吧……</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><strong>该代码TLE，懒得改</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pos</span> &#123;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="type">int</span> y;</span><br><span class="line">	<span class="built_in">pos</span>(<span class="type">int</span> a, <span class="type">int</span> b) :<span class="built_in">x</span>(a), <span class="built_in">y</span>(b) &#123;&#125;</span><br><span class="line">	<span class="built_in">pos</span>() &#123; x = <span class="number">0</span>; y = <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> pos&amp; other) <span class="type">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x == other.x &amp;&amp; y == other.y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hasher</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pos&amp; a)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">hash</span>&lt;<span class="type">int</span>&gt;()(a.x) + <span class="built_in">hash</span>&lt;<span class="type">int</span>&gt;()(a.y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, p, q;</span><br><span class="line">vector&lt;pos&gt; map1;</span><br><span class="line">vector&lt;pos&gt; dir = &#123; &#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line">unordered_map&lt;pos, <span class="type">int</span>,Hasher&gt; search = &#123;</span><br><span class="line">	&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,<span class="number">0</span>&#125;,&#123;&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,<span class="number">1</span>&#125;,&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,<span class="number">2</span>&#125;,&#123;&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,<span class="number">3</span>&#125;,&#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,<span class="number">4</span>&#125;,&#123;&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,<span class="number">5</span>&#125;,&#123;&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,<span class="number">6</span>&#125;,&#123;&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,<span class="number">7</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">decideK</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> k = <span class="number">0x7fffffff</span>;</span><br><span class="line">	<span class="keyword">for</span> (pos i : map1) &#123;</span><br><span class="line">		<span class="type">int</span> h = <span class="built_in">abs</span>(i.x - u), w = <span class="built_in">abs</span>(i.y - v);</span><br><span class="line">		<span class="keyword">if</span> (h == w &amp;&amp; h == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (h == w) k = <span class="built_in">min</span>(k,h);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (h == <span class="number">0</span>) &#123;</span><br><span class="line">			k = <span class="built_in">min</span>(k, w);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (w == <span class="number">0</span>) &#123;</span><br><span class="line">			k = <span class="built_in">min</span>(k, h);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> k2 = <span class="number">0</span>;</span><br><span class="line">	k2 = <span class="built_in">min</span>(<span class="built_in">min</span>(u - <span class="number">1</span>, n - u), <span class="built_in">min</span>(v - <span class="number">1</span>, m - v));</span><br><span class="line">	<span class="keyword">if</span> (k2 &lt; k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> k,<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (pos&amp; i : map1) &#123;</span><br><span class="line">		<span class="type">int</span> dx = i.x - u;</span><br><span class="line">		<span class="type">int</span> dy = i.y - v;</span><br><span class="line">		<span class="keyword">if</span> ((<span class="built_in">abs</span>(dx) == <span class="built_in">abs</span>(dy) &amp;&amp; <span class="built_in">abs</span>(dx)==k) || (dx == <span class="number">0</span> &amp;&amp; <span class="built_in">abs</span>(dy) == k) ||(dy ==<span class="number">0</span> &amp;&amp; <span class="built_in">abs</span>(dx) ==k)) &#123;</span><br><span class="line">			dx = dx / k, dy = dy / k;</span><br><span class="line">			pos direction = dir[(search[&#123;dx, dy&#125;]+t)%<span class="number">8</span>];</span><br><span class="line">			i.x = u + k * direction.x;</span><br><span class="line">			i.y = v + k * direction.y;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; i++) &#123;</span><br><span class="line">		cout &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; map1[i].x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; map1[i].y &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; p &gt;&gt; q;</span><br><span class="line">	map1 = <span class="built_in">vector</span>&lt;pos&gt;(p+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x, y;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		map1[i]=&#123; x,y &#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">		<span class="type">int</span> u, v, t;</span><br><span class="line">		cin &gt;&gt; u &gt;&gt; v &gt;&gt; t;</span><br><span class="line">		<span class="type">int</span> k = <span class="built_in">decideK</span>(u,v);</span><br><span class="line">		<span class="keyword">if</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">move</span>(u, v, k, t);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= p; j++) &#123;</span><br><span class="line">		ans ^= j * map1[j].x + map1[j].y;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//pm();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>自定义数据类型的hash</tag>
        <tag>STL的二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>【人类观察日记】2023-11-22</title>
    <url>/2023/11/22/%E3%80%90%E4%BA%BA%E7%B1%BB%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0%E3%80%912023-11-22/</url>
    <content><![CDATA[<p>今天W来找我问了一长串问题，抱着了解不同类型的人类的想法，我还是聊了两句。</p>
<p>以前我都会把聊天记录直接转给H，这次我没有。她在聚会呢，不想坏她心情。</p>
<p>受制于W的发言跳跃性大、逻辑混乱，这里不便把聊天记录直接贴出，因此今天的故事需要靠我的转述了。</p>
<h1 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h1><p>W同时暗恋两个人，分别是A和B.</p>
<p>大概三个月前，W来我的学校见B，但是B借故逃离（现在看来十分明智），W扑了个空。因此W请求我把她带进学校，后来要求加了我的微信好友。B的故事到此结束了，不得不说他是个幸运的人。</p>
<p>重点说说关于A的故事。</p>
<p>A和W是大学同学，W对A挂念已久。于是W在A的家乡旅游时，趁着这个偶然的机会跑到了A家小区，想了解一下A的生活环境。后来，W得知A在老家有女朋友。但这并没有浇灭W心中的爱欲之火，反而让她内心对A的向往越来越浓烈。终于，在上个月她不顾朋友的劝阻，向A告了白，对A说“想和你谈恋爱”。不出所料的，她被严厉地拒绝了，并且A“态度很差，直接拒收了纸条”。</p>
<p>我没有说难听的话，没有直说W这样挖墙脚是非常畜生的行为，因为我还想看看故事的发展。于是，我夸了夸A，说：“我觉得A做得很不错，干脆利落的拒绝可以让自己的女朋友安心。不会让女朋友有被权衡的感觉。”</p>
<p>被拒绝后，W开始指着A和A女友的照片，攻击他们的长相、并说A就是个烂人。</p>
<p>我已经有些不耐，毕竟突然开始人身攻击一个人只能说明攻击者已经气急败坏，顾不上自己的风度和涵养了。我不太理解为什么W去挖别人墙角，然后被别人赶走还会有这种近乎怨念的委屈。</p>
<p>A接着嘲讽道：“他们高中就偷尝禁果，希望他们真能从一而终。”</p>
<p>我笑了，问她为什么要成为A和他女友从一而终的道路上的阻碍，她给出了一个令我震惊的回答。</p>
<p>“人性就是这样经不起考验。谁说我就是他们的阻碍了，我可从未有意拆散他们。我喜欢A，想和A一起散步、一起跑步、一起逛图书馆……我就是想和他谈恋爱啊，不然我为什么表白。”</p>
<p>我沉默了，我不知道我面对的是不是OpenAI新研发的聊天机器人，可以无视人类道德的那种。</p>
<p>聊天以我的一段话作为落幕：</p>
<p>什么叫你没有有意拆散他们？爱情不就是独占性的吗？你是觉得他能同时跟你们俩在一起？</p>
<p>故事就到此结束了，聊天记录的后面都是些无关紧要的废话。</p>
<p>我实在难以理解挖别人墙角的人可以厚着脸皮冠冕堂皇的跟我说，“我是在考验人性。”</p>
<p>你在考验你坟头草能长多高。即使A拒绝了W，但是A的女友真的能当做这件事情无事发生吗？恐怕不能。换言之，被挖墙脚的最好结果其实也是两人的感情因为第三者的出现，出现了一道浅浅的裂痕。而这道裂痕如蛆附骨，会成为若干年后的恶疾。</p>
<p>最后我并没有对W说我对她的任何看法，因为我实在想不出来什么比“碧池”和“畜生”更有攻击性的词语，这的确是个遗憾。</p>
<p>不过当我们把目光聚焦在A的女友身上时，我还是不由自主地希望她能好好被爱。如果A坚定不移地站在她这边，那我希望他们长长久久；倘若A犹犹豫豫站在了她这边，那我希望在今后的无数次选择中，他的选择会逐渐坚定；假如A一直摇摆不定，那其实A也就配不上她了——让A去追寻更好的人吧，她值得更爱她的人。</p>
<p>纯情永远值得被爱。</p>
]]></content>
      <categories>
        <category>人类观察日记</category>
      </categories>
      <tags>
        <tag>情感</tag>
        <tag>逆天</tag>
      </tags>
  </entry>
  <entry>
    <title>【CSP】202303-3 LDAP</title>
    <url>/2023/11/24/%E3%80%90CSP%E3%80%91202303-3-LDAP/</url>
    <content><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>见 <a href="http://118.190.20.162/view.page?gpid=T163">http://118.190.20.162/view.page?gpid=T163</a></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p>需要存储用户，用户有两个属性，分别是<code>id</code>和<code>attribute</code>映射。</p>
<p>故所有用户的数据如此存储即可：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; att;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;User&gt; users;</span><br></pre></td></tr></table></figure>
<h2 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h2><p>在输入用户信息时，输入描述为“每行有若干用空格分隔的整数”</p>
<p>因此，需要用到<code>&lt;sstream&gt;</code>中的<code>stringstream</code>类。具体用法见往期blog.</p>
<p>需要略微注意的是<code>getline(str,istream)</code>是在头文件<code>&lt;string&gt;</code>中的，不是在<code>iostream</code>中的。且<code>getline</code>会扔掉结尾的换行符，所以连续的<code>getline</code>之间不需要插入<code>getchar</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">	string s;</span><br><span class="line">	<span class="built_in">getline</span>(cin,s);</span><br><span class="line">	<span class="function">stringstream <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (ss &gt;&gt; t) &#123;</span><br><span class="line">		<span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;</span><br><span class="line">			users[i].id = t;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cnt == <span class="number">1</span>) &#123;</span><br><span class="line">			cnt++;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> t2;</span><br><span class="line">			ss &gt;&gt; t2;</span><br><span class="line">			users[i].att[t] = t2;</span><br><span class="line">		&#125;</span><br><span class="line">		cnt++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h2><p>由于用CFG表示，所以大概率需要递归求解。</p>
<h3 id="结果存储"><a href="#结果存储" class="headerlink" title="结果存储"></a>结果存储</h3><p>每次运算的结果其实就是一个合法用户索引的集合。为了方便结果的运算，可以使用<code>bitset</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line">bitset&lt;2500&gt; ans; <span class="comment">// 注意尖括号内必须是常量</span></span><br><span class="line"><span class="function">bitset&lt;2500&gt; <span class="title">ans</span><span class="params">(<span class="string">&quot;110011&quot;</span>)</span></span>; <span class="comment">// 可以用字符串初始化，结果为&quot;0000...110011&quot;</span></span><br><span class="line"><span class="comment">// bitset支持&lt;&lt; &amp; | ^ &gt;&gt;位运算</span></span><br><span class="line">ans[<span class="number">0</span>]=<span class="number">1</span>; <span class="comment">// 这个索引是从高位往低位数的</span></span><br></pre></td></tr></table></figure>
<h3 id="求值"><a href="#求值" class="headerlink" title="求值"></a>求值</h3><ol>
<li>base case：<code>x:y</code>或<code>x~y</code>，直接利用<code>find</code>找到分隔符，然后用<code>stoi</code>找到操作数，再进行查找即可。</li>
<li>logic expr：<code>op(expr)(expr)</code>，先处理括号，然后递归求解，将结果apply<code>op</code>即可。</li>
</ol>
<h1 id="遇到的弱智bug"><a href="#遇到的弱智bug" class="headerlink" title="遇到的弱智bug"></a>遇到的弱智bug</h1><ol>
<li>忘了将结果排序。<code>sort(first,last)</code></li>
<li>忘了<code>str.find()</code>返回值可能是-1</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; att;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;User&gt; users;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function">bitset&lt;2500&gt; <span class="title">solve</span><span class="params">(string exp)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (exp.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">2500</span>&gt;();</span><br><span class="line">	<span class="keyword">if</span> (exp[<span class="number">0</span>] == <span class="string">&#x27;&amp;&#x27;</span> || exp[<span class="number">0</span>] == <span class="string">&#x27;|&#x27;</span>) &#123;</span><br><span class="line">		<span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> i;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">2</span>;; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (exp[i] == <span class="string">&#x27;(&#x27;</span>) l++;</span><br><span class="line">			<span class="keyword">if</span> (exp[i] == <span class="string">&#x27;)&#x27;</span>) r++;</span><br><span class="line">			<span class="keyword">if</span> (l == r) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> fl = <span class="number">2</span>, fr = i - <span class="number">1</span>;</span><br><span class="line">		l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> ll = i + <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span> (i=i+<span class="number">2</span>;; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (exp[i] == <span class="string">&#x27;(&#x27;</span>) l++;</span><br><span class="line">			<span class="keyword">if</span> (exp[i] == <span class="string">&#x27;)&#x27;</span>) r++;</span><br><span class="line">			<span class="keyword">if</span> (l == r) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> lr = i - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (exp[<span class="number">0</span>] == <span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">solve</span>(exp.<span class="built_in">substr</span>(fl, fr - fl + <span class="number">1</span>)) | <span class="built_in">solve</span>(exp.<span class="built_in">substr</span>(ll, lr - ll + <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">solve</span>(exp.<span class="built_in">substr</span>(fl, fr - fl + <span class="number">1</span>)) &amp; <span class="built_in">solve</span>(exp.<span class="built_in">substr</span>(ll, lr - ll + <span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		bitset&lt;<span class="number">2500</span>&gt; ans;</span><br><span class="line">		<span class="type">int</span> maohao = exp.<span class="built_in">find</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">		<span class="keyword">if</span> (maohao != <span class="number">-1</span>) &#123;</span><br><span class="line">			<span class="type">int</span> att = <span class="built_in">atoi</span>(exp.<span class="built_in">substr</span>(<span class="number">0</span>, maohao).<span class="built_in">c_str</span>());</span><br><span class="line">			<span class="type">int</span> val = <span class="built_in">atoi</span>(exp.<span class="built_in">substr</span>(maohao + <span class="number">1</span>).<span class="built_in">c_str</span>());</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; users.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (users[i].att.<span class="built_in">find</span>(att) != users[i].att.<span class="built_in">end</span>() &amp;&amp; users[i].att[att] == val) &#123;</span><br><span class="line">					ans[i] = <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> fan = exp.<span class="built_in">find</span>(<span class="string">&#x27;~&#x27;</span>);</span><br><span class="line">			<span class="type">int</span> att = <span class="built_in">atoi</span>(exp.<span class="built_in">substr</span>(<span class="number">0</span>, fan).<span class="built_in">c_str</span>());</span><br><span class="line">			<span class="type">int</span> val = <span class="built_in">atoi</span>(exp.<span class="built_in">substr</span>(fan + <span class="number">1</span>).<span class="built_in">c_str</span>());</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; users.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (users[i].att.<span class="built_in">find</span>(att) != users[i].att.<span class="built_in">end</span>() &amp;&amp; users[i].att[att] != val) &#123;</span><br><span class="line">					ans[i] = <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	users = <span class="built_in">vector</span>&lt;User&gt;(n);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		string s;</span><br><span class="line">		<span class="built_in">getline</span>(cin,s);</span><br><span class="line">		<span class="function">stringstream <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">		<span class="type">int</span> t;</span><br><span class="line">		<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (ss &gt;&gt; t) &#123;</span><br><span class="line">			<span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;</span><br><span class="line">				users[i].id = t;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (cnt == <span class="number">1</span>) &#123;</span><br><span class="line">				cnt++;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="type">int</span> t2;</span><br><span class="line">				ss &gt;&gt; t2;</span><br><span class="line">				users[i].att[t] = t2;</span><br><span class="line">			&#125;</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	cin &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		string exp;</span><br><span class="line">		cin &gt;&gt; exp;</span><br><span class="line">		bitset&lt;2500&gt; ans = <span class="built_in">solve</span>(exp);</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; out;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; users.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ans[i] == <span class="number">1</span>) &#123;</span><br><span class="line">				out.<span class="built_in">push_back</span>(users[i].id);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(out.<span class="built_in">begin</span>(), out.<span class="built_in">end</span>(), [](<span class="type">int</span> x, <span class="type">int</span> y) &#123;<span class="keyword">return</span> x &lt; y; &#125;);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; out.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			cout &lt;&lt; out[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
        <tag>递归</tag>
        <tag>表达式求值</tag>
      </tags>
  </entry>
  <entry>
    <title>【CSP】202212-3</title>
    <url>/2023/11/24/%E3%80%90CSP%E3%80%91202212-3/</url>
    <content><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>见 <a href="http://118.190.20.162/view.page?gpid=T158">http://118.190.20.162/view.page?gpid=T158</a></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="矩阵输入"><a href="#矩阵输入" class="headerlink" title="矩阵输入"></a>矩阵输入</h2><p>采用先填充该位置，然后根据该位置计算下个位置的方法进行矩阵输入。</p>
<p>转移函数：</p>
<script type="math/tex; mode=display">
(x,y)=\begin{cases}
(x,y+1),(x=0\lor x=7)\land y\%2=0\\
(x+1,y),(y=0\lor y=7)\land x\%2=0\\
(x+1,y-1),(x+y)\%2=1\\
(x-1,y+1),(x+y)\%2=0
\end{cases}</script><h2 id="结果四舍五入"><a href="#结果四舍五入" class="headerlink" title="结果四舍五入"></a>结果四舍五入</h2><p><code>(int)(ans+0.5)</code></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi (acos(-1))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">Q</span>(<span class="number">8</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">8</span>)), <span class="built_in">M</span>(<span class="number">8</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">8</span>,<span class="number">0</span>)),<span class="built_in">res</span>(<span class="number">8</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">8</span>));</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pm</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">			cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">			cin &gt;&gt; Q[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">		cin &gt;&gt; M[x][y];</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="number">0</span> || x == <span class="number">7</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (y % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">				y++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">				x++, y--;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				x--, y++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">0</span> || y == <span class="number">7</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">				x++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">				x--, y++;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				x++, y--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> ((x + y) % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">				x++, y--;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				x--, y++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (T == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">pm</span>(M);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//pm(M);</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">			M[i][j] *= Q[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (T == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">pm</span>(M);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//pm(M);</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">			<span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; <span class="number">8</span>; u++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; <span class="number">8</span>; v++) &#123;</span><br><span class="line">					<span class="type">double</span> f_u = u == <span class="number">0</span> ? <span class="built_in">sqrt</span>(<span class="number">0.5</span>) : <span class="number">1</span>;</span><br><span class="line">					<span class="type">double</span> f_v = v == <span class="number">0</span> ? <span class="built_in">sqrt</span>(<span class="number">0.5</span>) : <span class="number">1</span>;</span><br><span class="line">					ans += f_u * f_v * M[u][v] * <span class="built_in">cos</span>(pi / <span class="number">8</span> * u * (i + <span class="number">0.5</span>)) * <span class="built_in">cos</span>(pi / <span class="number">8</span> * v * (j + <span class="number">0.5</span>));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="type">int</span> a = (ans * <span class="number">0.25</span> + <span class="number">128</span> + <span class="number">0.5</span>);</span><br><span class="line">			<span class="keyword">if</span> (a &gt; <span class="number">255</span>) a = <span class="number">255</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (a &lt; <span class="number">0</span>) a = <span class="number">0</span>;</span><br><span class="line">			res[i][j] = a;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pm</span>(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>蛇形矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>【CSP】202209-2 何以包邮</title>
    <url>/2023/11/25/%E3%80%90CSP%E3%80%91202209-2-%E4%BD%95%E4%BB%A5%E5%8C%85%E9%82%AE/</url>
    <content><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="枚举子数组"><a href="#枚举子数组" class="headerlink" title="枚举子数组"></a>枚举子数组</h2><p>递归进行枚举，对于当前位置，只有两种可能性：</p>
<ol>
<li>要这个商品，那么将价格传给下一层。</li>
<li>不要这个商品，直接把这一层收到的价格传给下一层。</li>
</ol>
<p>直接进行递归即可。</p>
<h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p>$v[1……n]$是物品的价值，$c[1……n]$是物品的价格，$C$是手上的钱。</p>
<p>背包问题的实质就是寻找一个子序列$A$，使得$sum(c[A])&lt;C$并且$sum(v[A])$最大。</p>
<h2 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h2><p>本题的实质相当于是寻找一个子序列$A$，使得$sum(c[A])\geq x$并且$sum(c[A])$最小，符号刚好是相反的。</p>
<p>那么可以借助商品的总价值$t$进行转化：</p>
<p>寻找一个子序列$B$，使得$sum(c[B])\leq t-x$并且$sum(c[B])$最大。</p>
<p>那么，该$B$就可以使得$t-sum(c[B])\geq x$并且$t-sum(c[B])$最小，则$A=U-B$</p>
<p>背包容量为$t-x$，价值为$c[i]$，价格为$c[i]$</p>
<p>$dp[i][j]=max(dp[i-1][j],dp[i-1][j-c[i]]+c[i])$</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="枚举子数组-1"><a href="#枚举子数组-1" class="headerlink" title="枚举子数组"></a>枚举子数组</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;pri;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0x7fffffff</span>, x, n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i &gt;= n) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (pri[i] + cost &gt;= x) ans = <span class="built_in">min</span>(pri[i] + cost, ans);</span><br><span class="line">	<span class="built_in">dfs</span>(i + <span class="number">1</span>, pri[i] + cost);<span class="comment">// 用i</span></span><br><span class="line">	<span class="built_in">dfs</span>(i + <span class="number">1</span>, cost);<span class="comment">// 不用i</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">	<span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">	pri = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; pri[i];</span><br><span class="line">		total += pri[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DP-1"><a href="#DP-1" class="headerlink" title="DP"></a>DP</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;pri;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n, x;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">	<span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">	pri = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; pri[i];</span><br><span class="line">		total += pri[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> y = total - x;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">	vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(y + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= y; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (j &gt;= pri[i]) &#123;</span><br><span class="line">				dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j - pri[i]]+pri[i], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; total-dp[n][y];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>枚举子数组</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title>【人类观察日记】2023-11-25</title>
    <url>/2023/11/25/%E3%80%90%E4%BA%BA%E7%B1%BB%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0%E3%80%912023-11-25/</url>
    <content><![CDATA[<h1 id="被骗"><a href="#被骗" class="headerlink" title="被骗"></a>被骗</h1><p>今天有个朋友被骗了500块钱，过程让人忍俊不禁。</p>
<p>有人打着活动回馈的名号，给A“转了”500块，称再把这些钱转回去可以提升DNF的战力。</p>
<p>这其实是一个一眼就能识破的骗局，手法拙劣可见一斑——因为骗子甚至都不乐意P一张支付宝转账的截图。</p>
<p>蹊跷的是，几分钟后A翻了翻自己的短信，“+500.00”几个大字赫然躺在工行卡发来的短信中。</p>
<p>大概是因为A比起这碎银几两更关心自己的DNF战力，A将这500块转了回去。</p>
<p>半个小时后，A越想越觉得不对——为什么这次余额提醒的短信来得这么慢？</p>
<p>疑虑驱使着A仔细看了看他的短信，结果——</p>
<p>这500是他半个月前自己转进去的。</p>
<p>我大概明白了行骗的要素：拙劣的手法、稚嫩的演技以及一个自己骗自己的受害者。</p>
<p>“骗骗哥们儿可以，别把自己给骗了”。</p>
]]></content>
      <categories>
        <category>人类观察日记</category>
      </categories>
      <tags>
        <tag>搞笑</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】2023-11-29</title>
    <url>/2023/11/29/%E3%80%90%E6%97%A5%E5%B8%B8%E3%80%912023-11-29/</url>
    <content><![CDATA[<p>今天去了栖霞山。</p>
<p>本来想要上周去的，但因为体测耽搁了。如我所料，来得有些晚了——有些枫叶已经红得发紫，呈现出病态的样貌。</p>
<p>大概有许多游客在感慨自己没有带相机，没办法将眼前的一切定格——那金色的雨和鲜艳的红叶只能躺在仅仅数千万像素的手机里，随着时间的流逝从记忆中遗落。于是我对着同行的伙伴说，重在体验。虽然没有带相机，但是我们还有身体。</p>
<p>风景的确很不错，尤其是秋风乍起时，层层叠叠的随风旋转飘落的黄叶。是的，是很像蝴蝶，但是我并不想用这么老套的比喻，它描述不了我的感受。当秋风拂面时，我感到宁静。仿佛我又回到了江心洲大桥的那个傍晚、又回到了迪士尼树影斑驳的那个午后、又回到了夫子庙的灯火通明的夜晚。重在感受，其实就是一种匹配。当新的感受中的一部分与旧的感受重合时，我往往感到心安——重合的部分预示我的审美稳固，那些陌生的部分也能给我带来新的体验。总是，百无一害。</p>
<p>路上我们都走累了，我恰好看到有个叫“太虚亭”的景点，于是对同伴说，“为了证明你们不太虚，加把劲吧，起码得走过太虚亭才行。”这么一想，我还算有点幽默。一路上，我们有说有笑，尽管疲惫，但也算圆满。可惜的是，我自己讲的笑话我现在一个都记不起来了。</p>
<p>下山时，远处的陌生人的喊叫道“赐予我力量吧！”我也没想到我会大声回复“叫我上帝”。</p>
<p>回寝室后，坐在椅子上睡着了，感到头痛。</p>
<p>莫名地难过。</p>
<p>现实。</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
  </entry>
  <entry>
    <title>【日常】2023-12-1</title>
    <url>/2023/12/01/%E3%80%90%E6%97%A5%E5%B8%B8%E3%80%912023-12-1/</url>
    <content><![CDATA[<p>“你看你女朋友去那么好的地方实习，反观你……”</p>
<p>是的，这跟过往那些外貌上的攻击一样——</p>
<p>让我无可辩驳。</p>
<p>我感到疲惫。</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
  </entry>
  <entry>
    <title>【ADS】Carla初步</title>
    <url>/2023/12/01/%E3%80%90ADS%E3%80%91Carla%E5%88%9D%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="操作系统选择"><a href="#操作系统选择" class="headerlink" title="操作系统选择"></a>操作系统选择</h2><p>建议使用<code>Ubuntu20.04</code>进行安装。</p>
<h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><p>在<a href="https://github.com/carla-simulator/carla/releases/tag/0.9.15/">Release 0.9.15 · carla-simulator/carla (github.com)</a>选择合适的安装包。</p>
<p>下载后得到一个<code>*.tar.gz</code>文件，可以直接使用<code>tar -zxvf &lt;filename&gt;</code>进行解压。</p>
<p>创建并激活虚拟环境：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda create -n carla python==3.8</span><br><span class="line">conda activate carla</span><br></pre></td></tr></table></figure>
<p>安装client：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade pip</span><br><span class="line">pip3 install carla</span><br></pre></td></tr></table></figure>
<p>在<code>PythonAPI/carla</code>中有<code>requirements.txt</code>，里面有所需的依赖。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>安装<code>nvidia</code>驱动。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt search nvidia-driver <span class="comment"># 找到所有能安装的版本</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install &lt;driver_name&gt;</span><br><span class="line">dpkg -l | grep -i nvidia <span class="comment"># 查看是否安装成功</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<p>启动：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./CARLAUE4.sh -quality-level=Low -prefernvidia</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>切换到<code>PythonAPI/examples</code>目录下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python3 -m pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>输入以下命令观察地图中是否出现车辆：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python generate_traffic.py</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ADS</category>
      </categories>
      <tags>
        <tag>Carla</tag>
      </tags>
  </entry>
  <entry>
    <title>【教程】git常用命令</title>
    <url>/2023/12/01/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="TBD"><a href="#TBD" class="headerlink" title="TBD"></a>TBD</h1>]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>【教程】git整体认识</title>
    <url>/2023/12/01/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91git%E6%95%B4%E4%BD%93%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<h1 id="TBD"><a href="#TBD" class="headerlink" title="TBD"></a>TBD</h1>]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】2023-12-9</title>
    <url>/2023/12/09/%E3%80%90%E6%97%A5%E5%B8%B8%E3%80%912023-12-9/</url>
    <content><![CDATA[<p>昨天和H交谈的时候得知她妈妈的要求已经从“少和我一起玩”变成“不能和我一起玩”了。</p>
<p>昨晚入睡很艰难，大概是因为颧骨旁边的新长出的痘痘太痛，加之蚊子留在附近的包又痛又痒。</p>
<p>半梦半醒之间，我似乎想到了许多东西。五年前我跟H分开，总结来说的确是事发突然——在某个周日的傍晚，我照常去她的座位上找到她，和她有一搭没一搭地聊天。突然她抬起头跟我说，她家里不再让她和我交流，指着我的座位跟我说，“等你回到你的座位上，我们就是陌生人了。”那时我还幼稚，拉着她的手，求她多陪我一会儿，还追着她问原因。结果当然是，没有原因。后来，我发现我的好友列表里不再有H，生活中也不再有了。</p>
<p>过了大概一周，轮到我班级演讲，具体内容我已然忘记，不过结尾的确是我精心造就，因此记忆犹新——我喜欢童话，并非因为童话故事洋溢着美好，而是因为童话总会有一个结局。但很可惜，人总要回到现实。现实不像童话，每每给你一个确定的结局，或好或坏。现实只会给你现实。大梦初醒，茫然四顾，只剩现实——现实如此，如此现实。演讲之后，被语文老师说“十分颓唐”，不过那不重要。我的确是讲给H听的，目的大概是诉说我的无奈。至于H听了没有，也不重要。因为她没办法隔着父母老师铸就的屏障告诉我她的想法。</p>
<p>想到这些，我似乎一下子意识到，很多东西都是急转直下，没有预兆，也观测不到理由。我的感情似乎往往被一股强大的外力所影响，这让我感到有些无奈。</p>
<p>以前，H的安全感很薄弱——第一天在一起的时候就跟我说“每一次见面都当成最后一次”。每次告别前夕，她总会躺在床上默默流泪。这时，我往往轻轻抱着她，再慢慢摸着她的小脑袋安慰她，好让她觉得我们的感情并非昙花一现，好让她相信我们还会有很长很长的未来。时间已经快过去两个半月了，她似乎逐渐相信这段感情可以越走越远，相信“每一次见面后都会有下次”，相信每一次抛给我的情绪都会被接住。在稳中向好的当下，似乎这股外力要将美好的愿景全部打碎。“下次”，还会有吗？这已经不是我能掌控的了。如果变成网友，要怎么定时给她加buff呢？一个温暖的拥抱就能安抚下来的情绪，隔着屏幕要怎么让她平复呢？我感到有些无助。</p>
<p>这怪不了谁，没有人有错——她的妈妈只是想保护自己的孩子，她也仅仅是被要求听妈妈的话罢了。看起来，我更像是反派才对。</p>
<p>H是很爱我的——她经常想到以后同居的时候温馨的生活画面，也常常跟我说根本无法想象要是我一直在她身边她会有多幸福。我也很高兴这次她能跟我站在一边，想要和我见面。不过脑子里总能浮现出这样的场景：一段时间后，H像五年前一样，拉着我的手说，“没办法，不行的。”</p>
<p>一想到这个场景，我便感到愧疚和难过：我以前那么幼稚，拉着她的手不放，还要刨根问底，一定给了她不小压力吧。现在呢？我能做到成熟一些吗？我不知道。大概需要很长时间吧。</p>
<p>要是上次见面的时候，再多给她一些安全感就好了。如果还有机会的话，每次就当成最后一次吧。</p>
<p>没想到直到现在我也会因为难过导致的胸闷而昏过去。上次这样大概已经是七年前了吧。</p>
<p>感谢H能够这么相信我，还愿意与我为伴。</p>
<p>希望看到这个的朋友感情顺利，不必在意我这失重的落叶。</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>情感</tag>
      </tags>
  </entry>
  <entry>
    <title>【教程】Anaconda_for_linux</title>
    <url>/2023/12/19/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91Anaconda-for-linux/</url>
    <content><![CDATA[<h1 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h1><p>在<a href="https://www.anaconda.com/download">Free Download | Anaconda</a>进行安装包的下载即可。</p>
<p>注意下载过程中会产生<code>.part</code>文件，这说明下载还没有完成，不要乱动这些文件。</p>
<p><code>Ubuntu20.04</code>下，下载的文件为<code>.sh</code>格式。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>sudo bash &lt;filename&gt;</code>可以直接进入安装。</p>
<p>值得注意的是，默认的安装路径是<code>/root/anaconda3</code>，但是由于没有普通用户没有办法访问<code>root</code>目录，所以需要对安装目录进行修改。</p>
<p>将安装目录改为：<code>/home/username/anaconda3</code>即可。这里似乎不能直接用<code>~/anaconda3</code>，所以还是尽量用绝对路径吧。</p>
<h1 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h1><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>要正常使用<code>conda *</code>命令，需要进行环境变量的配置。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<p><strong>注：如果vim后显示文件内容为空，说明不存在这个文件。</strong></p>
<p>在<code>.bashrc</code>文件的末尾添加<code>export PATH=$PATH:~/anaconda3/bin</code>即可。</p>
<p>要么重启终端，要么<code>source ~/.bashrc</code>，在当前<code>shell</code>执行<code>.bashrc</code>脚本，激活环境变量。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda init bash <span class="comment"># 初始化</span></span><br><span class="line">conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">false</span> <span class="comment"># 开启终端后自动激活base环境</span></span><br><span class="line">conda create -n &lt;env_name&gt; python==&lt;version&gt; <span class="comment"># 创建环境并指定环境的python版本</span></span><br><span class="line">conda remove -n &lt;env_name&gt; --all <span class="comment"># 删除环境</span></span><br><span class="line">conda activate &lt;env_name&gt; <span class="comment"># 激活环境</span></span><br><span class="line">conda deactivate <span class="comment"># 关闭环境</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>【教程】如何在开机时选择不同linux内核</title>
    <url>/2023/12/20/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E5%A6%82%E4%BD%95%E5%9C%A8%E5%BC%80%E6%9C%BA%E6%97%B6%E9%80%89%E6%8B%A9%E4%B8%8D%E5%90%8Clinux%E5%86%85%E6%A0%B8/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/default/grub</span><br></pre></td></tr></table></figure>
<p>然后将文件中的<code>GRUB_DEFAULT</code>从<code>0</code>改为其他值即可。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo update-grub <span class="comment"># 更新设置</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>重装系统</tag>
      </tags>
  </entry>
</search>
